import config from "@colyseus/tools";

import { WebSocketTransport } from "@colyseus/ws-transport";
import { monitor } from "@colyseus/monitor";
import { playground } from "@colyseus/playground";

// import { RedisDriver } from "@colyseus/redis-driver";
// import { RedisPresence } from "@colyseus/redis-presence";

/**
 * Import your Room files
 */
import { MyRoom } from "./rooms/MyRoom";
import auth from "./config/auth";

export default config({
    options: {
        // devMode: true,
        // driver: new RedisDriver(),
        // presence: new RedisPresence(),
    },

    initializeTransport: (options) => new WebSocketTransport({
        pingInterval: 6000,
        pingMaxRetries: 4,
        maxPayload: 1024 * 1024 * 1, // 1MB Max Payload
      }),

    initializeGameServer: (gameServer) => {
        /**
         * Define your room handlers:
         */
        gameServer.define('my_room', MyRoom);

    },

    initializeExpress: (app) => {
        /**
         * Bind your custom express routes here:
         */
        app.get("/", (req, res) => {
            res.send(`Instance ID => ${process.env.NODE_APP_INSTANCE ?? "NONE"}`);
        });

        /**
         * Bind @colyseus/monitor
         * It is recommended to protect this route with a password.
         * Read more: https://docs.colyseus.io/tools/monitor/
         */
        app.use("/colyseus", monitor());

        // Bind "playground"
        app.use("/playground", playground);

        // Bind auth routes
        app.use(auth.prefix, auth.routes());
    },


    beforeListen: () => {
        /**
         * Before before gameServer.listen() is called.
         */
    }
});
  
/**
 * IMPORTANT:
 * ---------
 * Do not manually edit this file if you'd like to use Colyseus Arena
 *
 * If you're self-hosting (without Arena), you can manually instantiate a
 * Colyseus Server as documented here: ðŸ‘‰ https://docs.colyseus.io/server/api/#constructor-options
 */
import { listen } from "@colyseus/tools";

// Import arena config
import app from "./app.config";

// Create and listen on 2567 (or PORT environment variable.)
listen(app);
  
import { auth } from "@colyseus/auth";

const fakeDb: any[] = [];

auth.settings.onFindUserByEmail = async (email) => {
  const userFound = fakeDb.find((user) => user.email === email);;

  console.log("onFindUserByEmail", userFound);

  // return a copy of the user object
  return userFound && JSON.parse(JSON.stringify(userFound));
};

auth.settings.onRegisterWithEmailAndPassword = async (email, password) => {
  const user = { email, password, name: email.split("@")[0], errorServerIsStringButClientIsInt: "this should not crash the client", someAdditionalData: true, };

  // keep a copy of the user object
  fakeDb.push(JSON.parse(JSON.stringify(user)));

  return user;
};

auth.settings.onRegisterAnonymously = async (options) => {
  return {
    anonymousId: Math.round(Math.random() * 1000),
    anonymous: true,
    ...options
  };
};

export default auth;  
import { Room, Client } from "colyseus";
import { MyRoomState, Player } from "./schema/MyRoomState";

export type PositionMessage = {
  x: number,
  y: number
}

export class MyRoom extends Room<MyRoomState> {

  onCreate (options: any) {
    this.setState(new MyRoomState());
  }

  onJoin (client: Client, options: any) {
    console.log(client.sessionId, "joined!");

    this.state.players.set(client.sessionId, new Player());

    // Send welcome message to the client.
    client.send("welcomeMessage", "Welcome to Colyseus!");

    // Listen to position changes from the client.
    this.onMessage("position", (client, position: PositionMessage) => {
      const player = this.state.players.get(client.sessionId);
      player.x = position.x;
      player.y = position.y;
      console.log({position})
    });
  }

  onLeave (client: Client, consented: boolean) {
    console.log(client.sessionId, "left!");
  }

  onDispose() {
    console.log("room", this.roomId, "disposing...");
  }

}
  
import { MapSchema, Schema, Context, type } from "@colyseus/schema";

export class Player extends Schema {

  @type("number") x: number = 0;
  @type("number") y: number = 0;

}

export class MyRoomState extends Schema {
	@type({map: Player})
	players: MapSchema<Player> = new MapSchema<Player>();
}
  
